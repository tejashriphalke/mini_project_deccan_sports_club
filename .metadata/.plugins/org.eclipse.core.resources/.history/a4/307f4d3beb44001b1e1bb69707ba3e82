package com.example.controller;


import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.entity.Comments;
import com.example.entity.Enrollment;
import com.example.dto.EnrollmentDto;
import com.example.service.ManagerServiceI;
@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/manager")
public class ManagerController {

	@Autowired(required = true)
	ManagerServiceI managerService;	

	//getting list of all the members who have applied for different enrollment
	@GetMapping(value="/all-enrollment-data-list")
	public ResponseEntity<?> getEnrollmentData()
	{
		List<EnrollmentDto> enrollmentData = managerService.getEnrollmentData();
		if (enrollmentData.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Enrollments not found in database");
		} else
			return ResponseEntity.status(HttpStatus.FOUND).body(enrollmentData);
	}


	//getting list of all the members who have applied for enrollment having pending status
	@GetMapping(value="/all-pending-status-enrollments-list")
	public ResponseEntity<?> getPendingEnrollmentList()
	{	
		List<EnrollmentDto> enrollmentData = managerService.getPendingEnrollmentList();
		if (enrollmentData.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No pending enrollments present in database");
		} else
			return ResponseEntity.status(HttpStatus.OK).body(enrollmentData);
	}

	//getting list of all the members who have applied for renewing enrollment
	@GetMapping(value="/all-renew-status-enrollments-list")
	public ResponseEntity<?> getRenewStatusEnrollmentList()
	{
		List<EnrollmentDto> enrollmentData = managerService.getRenewEnrollmentList();
		if (enrollmentData.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No renew-status enrollments present in database");
		}
		else
			return ResponseEntity.status(HttpStatus.FOUND).body(enrollmentData);			
	}

	//getting list of all approved status enrollments
	@GetMapping(value="/all-approved-status-enrollments-list")
	public ResponseEntity<?> getApprovedEnrollmentList()
	{
		List<EnrollmentDto> enrollmentData = managerService.getApprovedEnrollmentList();
		if (enrollmentData.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body("No approved enrollments present in database");
		}
		else
			return ResponseEntity.status(HttpStatus.FOUND).body(enrollmentData);	
	}

	//approve enrollment
	@PutMapping(value="/approve-enrollment/{id}")
	public ResponseEntity<?> approveEnrollment(@RequestBody EnrollmentDto enrollmentdto,@PathVariable(value = "id") int enrollmentId) throws Exception
	{		
		if( managerService.approveEnrollment(enrollmentdto,enrollmentId)!=null)
		{
			return ResponseEntity.status(HttpStatus.OK).body("Approved Successfully");
		}
		else
			return  ResponseEntity.status(HttpStatus.NOT_FOUND).body("Couldnt complete the approve request"); 	  
	}

	//reject enrollment 
	@PutMapping(value="/reject-enrollment/{id}")
	public ResponseEntity<?> rejectEnrollment(@PathVariable(value = "id") int enrollmentId)
	{
		if( managerService.rejectEnrollment(enrollmentId)!=null)
		{
			return ResponseEntity.status(HttpStatus.OK).body("Rejected Successfully");
		}
		else
			return  ResponseEntity.status(HttpStatus.NOT_FOUND).body("Couldnt complete the reject request"); 	  
	}

	//Renew enrollment 
	@PutMapping(value="/renew-enrollment/{id}")
	public ResponseEntity<?> renewEnrollment(@PathVariable(value = "id") int enrollmentId) throws Exception
	{
		if( managerService.renewEnrollment(enrollmentId)!=null)
		{
			return ResponseEntity.status(HttpStatus.OK).body("Renewed enrollment Successfully");
		}
		else
			return  ResponseEntity.status(HttpStatus.NOT_FOUND).body("Couldnt complete the renew request"); 	  
	}




}
