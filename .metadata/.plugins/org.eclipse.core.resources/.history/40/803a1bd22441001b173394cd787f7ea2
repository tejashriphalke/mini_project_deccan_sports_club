package com.example.controller;


import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.entity.Comments;
import com.example.entity.Enrollment;
import com.example.dto.EnrollmentDto;
import com.example.service.ManagerServiceI;

@RestController
@RequestMapping("/manager")
public class ManagerController {

	@Autowired(required = true)
	ManagerServiceI managerService;	

	//getting list of all the members who have applied for different enrollment
	@GetMapping("/all-enrollment-data-list")
	public ResponseEntity<?> getEnrollmentData()
	{
		List<EnrollmentDto> enrollmentData = managerService.getEnrollmentData();
		if (enrollmentData.isEmpty()) {
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body("Enrollments not found in database");
		} else
			return ResponseEntity.status(HttpStatus.FOUND).body(enrollmentData);
	}



	//getting list of all the memers who have applied for enrollment
	@GetMapping("/all-pending-status-enrollments-list")
	public ResponseEntity<List<EnrollmentDto>> getPendingEnrollmentList()
	{
		try {
			List<EnrollmentDto> enrollmentData = managerService.getPendingEnrollmentList();

			if (enrollmentData.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(enrollmentData, HttpStatus.OK);
		} catch (Exception e) {
			System.out.println("Exception is "+e);
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}
	//getting list of all the members who have applied for renew enrollment
	@GetMapping("/all-renew-status-enrollments-list")
	public ResponseEntity<List<EnrollmentDto>> getRenewStatusEnrollmentList()
	{
		try {
			List<EnrollmentDto> enrollmentData = managerService.getRenewEnrollmentList();

			if (enrollmentData.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(enrollmentData, HttpStatus.OK);
		} catch (Exception e) {
			System.out.println("Exception is "+e);
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}


	@GetMapping("/all-approved-status-enrollments-list")
	public ResponseEntity<List<EnrollmentDto>> getApprovedEnrollmentList()
	{
		try {
			List<EnrollmentDto> enrollmentData = managerService.getApprovedEnrollmentList();

			if (enrollmentData.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			return new ResponseEntity<>(enrollmentData, HttpStatus.OK);
		} catch (Exception e) {
			System.out.println("Exception is "+e);
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}

	}

	//approve enrollment
	@PutMapping("/approve-enrollment/{id}")
	public ResponseEntity<Enrollment> approveEnrollment(@PathVariable(value = "id") int enrollmentId)
	{
		try {
			Enrollment enrollment= managerService.approveEnrollment(enrollmentId);
			return new ResponseEntity<>(enrollment, HttpStatus.OK);
		}
		catch(Exception ex)
		{
			System.out.println("Exception is "+ex);
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	//reject enrollment 
	@PutMapping("/reject-enrollment/{id}")
	public ResponseEntity<Enrollment> rejectEnrollment(@PathVariable(value = "id") int enrollmentId)
	{
		try {
			Enrollment enrollment= managerService.rejectEnrollment(enrollmentId);
			return new ResponseEntity<>(enrollment, HttpStatus.OK);
		}
		catch(Exception ex)
		{
			System.out.println("Exception is "+ex);
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	//Renew enrollment 
		@PutMapping("renew-enrollment/{id}")
		public ResponseEntity<Enrollment> renewEnrollment(@PathVariable(value = "id") int enrollmentId)
		{
			try {
				Enrollment enrollment= managerService.renewEnrollment(enrollmentId);
				return new ResponseEntity<>(enrollment, HttpStatus.OK);
			}
			catch(Exception ex)
			{
				System.out.println("Exception is "+ex);
				return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
	



}
